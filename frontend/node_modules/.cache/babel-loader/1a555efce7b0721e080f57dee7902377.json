{"ast":null,"code":"import _slicedToArray from \"/Users/user/basis/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/user/basis/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/user/basis/frontend/src/pages/People/People.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-template-columns: repeat(auto-fill, minmax(180px, 3fr));\\n  grid-auto-rows: auto;\\n  grid-gap: 20px;\\n  margin-bottom: \", \";\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-top: \", \";\\n\\n  @media (min-width: \", \") {\\n    margin-left: \", \";\\n    padding: 0;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Fragment } from 'react';\nimport styled from 'styled-components';\nimport { Container } from 'components/Layout';\nimport Skeleton from 'components/Skeleton';\nimport { Loading } from 'components/Loading';\nimport Empty from 'components/Empty';\nimport InfiniteScroll from 'components/InfiniteScroll';\nimport Head from 'components/Head';\nimport PeopleCard from './PeopleCard';\nimport { GET_USERS } from 'graphql/user';\nimport { PEOPLE_PAGE_USERS_LIMIT } from 'constants/DataLimit';\nimport { useStore } from 'store';\nimport { useQuery } from '@apollo/client';\nvar Root = styled(Container)(_templateObject(), function (p) {\n  return p.theme.spacing.lg;\n}, function (p) {\n  return p.theme.screen.lg;\n}, function (p) {\n  return p.theme.spacing.lg;\n});\nvar PeopleContainer = styled.div(_templateObject2(), function (p) {\n  return p.theme.spacing.lg;\n});\n/**\n * People page\n */\n\nvar People = function People() {\n  var _useStore = useStore(),\n      _useStore2 = _slicedToArray(_useStore, 1),\n      auth = _useStore2[0].auth;\n\n  var variables = {\n    userId: auth.user.id,\n    skip: 0,\n    limit: PEOPLE_PAGE_USERS_LIMIT\n  };\n\n  var _useQuery = useQuery(GET_USERS, {\n    variables,\n    notifyOnNetworkStatusChange: true\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  var renderContent = function renderContent() {\n    if (loading && networkStatus === 1) {\n      return /*#__PURE__*/React.createElement(PeopleContainer, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Skeleton, {\n        height: 280,\n        count: PEOPLE_PAGE_USERS_LIMIT,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    var _data$getUsers = data.getUsers,\n        users = _data$getUsers.users,\n        count = _data$getUsers.count;\n    if (!users.length > 0) return /*#__PURE__*/React.createElement(Empty, {\n      text: \"No people yet.\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 35\n      }\n    });\n    return /*#__PURE__*/React.createElement(InfiniteScroll, {\n      data: users,\n      dataKey: \"getUsers.users\",\n      count: parseInt(count),\n      variables: variables,\n      fetchMore: fetchMore,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, function (data) {\n      var showNextLoading = loading && networkStatus === 3 && count !== data.length;\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(PeopleContainer, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }\n      }, data.map(function (user) {\n        return /*#__PURE__*/React.createElement(PeopleCard, {\n          key: user.id,\n          user: user,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 19\n          }\n        });\n      })), showNextLoading && /*#__PURE__*/React.createElement(Loading, {\n        top: \"lg\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 35\n        }\n      }));\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Root, {\n    maxWidth: \"md\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Head, {\n    title: \"Find new People\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }), renderContent());\n};\n\nexport default People;","map":{"version":3,"sources":["/Users/user/basis/frontend/src/pages/People/People.js"],"names":["React","Fragment","styled","Container","Skeleton","Loading","Empty","InfiniteScroll","Head","PeopleCard","GET_USERS","PEOPLE_PAGE_USERS_LIMIT","useStore","useQuery","Root","p","theme","spacing","lg","screen","PeopleContainer","div","People","auth","variables","userId","user","id","skip","limit","notifyOnNetworkStatusChange","data","loading","fetchMore","networkStatus","renderContent","getUsers","users","count","length","parseInt","showNextLoading","map"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,SAASC,SAAT,QAA0B,cAA1B;AAEA,SAASC,uBAAT,QAAwC,qBAAxC;AAEA,SAASC,QAAT,QAAyB,OAAzB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,IAAMC,IAAI,GAAGZ,MAAM,CAACC,SAAD,CAAT,oBACM,UAACY,CAAD;AAAA,SAAOA,CAAC,CAACC,KAAF,CAAQC,OAAR,CAAgBC,EAAvB;AAAA,CADN,EAGa,UAACH,CAAD;AAAA,SAAOA,CAAC,CAACC,KAAF,CAAQG,MAAR,CAAeD,EAAtB;AAAA,CAHb,EAIS,UAACH,CAAD;AAAA,SAAOA,CAAC,CAACC,KAAF,CAAQC,OAAR,CAAgBC,EAAvB;AAAA,CAJT,CAAV;AASA,IAAME,eAAe,GAAGlB,MAAM,CAACmB,GAAV,qBAKF,UAACN,CAAD;AAAA,SAAOA,CAAC,CAACC,KAAF,CAAQC,OAAR,CAAgBC,EAAvB;AAAA,CALE,CAArB;AAQA;AACA;AACA;;AACA,IAAMI,MAAM,GAAG,SAATA,MAAS,GAAM;AAAA,kBACAV,QAAQ,EADR;AAAA;AAAA,MACVW,IADU,iBACVA,IADU;;AAEnB,MAAMC,SAAS,GAAG;AAChBC,IAAAA,MAAM,EAAEF,IAAI,CAACG,IAAL,CAAUC,EADF;AAEhBC,IAAAA,IAAI,EAAE,CAFU;AAGhBC,IAAAA,KAAK,EAAElB;AAHS,GAAlB;;AAFmB,kBAOiCE,QAAQ,CAACH,SAAD,EAAY;AACtEc,IAAAA,SADsE;AAEtEM,IAAAA,2BAA2B,EAAE;AAFyC,GAAZ,CAPzC;AAAA,MAOXC,IAPW,aAOXA,IAPW;AAAA,MAOLC,OAPK,aAOLA,OAPK;AAAA,MAOIC,SAPJ,aAOIA,SAPJ;AAAA,MAOeC,aAPf,aAOeA,aAPf;;AAYnB,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,QAAIH,OAAO,IAAIE,aAAa,KAAK,CAAjC,EAAoC;AAClC,0BACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAE,GAAlB;AAAuB,QAAA,KAAK,EAAEvB,uBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD;;AAPyB,yBASDoB,IAAI,CAACK,QATJ;AAAA,QASlBC,KATkB,kBASlBA,KATkB;AAAA,QASXC,KATW,kBASXA,KATW;AAU1B,QAAI,CAACD,KAAK,CAACE,MAAP,GAAgB,CAApB,EAAuB,oBAAO,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,gBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAEvB,wBACE,oBAAC,cAAD;AACE,MAAA,IAAI,EAAEF,KADR;AAEE,MAAA,OAAO,EAAC,gBAFV;AAGE,MAAA,KAAK,EAAEG,QAAQ,CAACF,KAAD,CAHjB;AAIE,MAAA,SAAS,EAAEd,SAJb;AAKE,MAAA,SAAS,EAAES,SALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOG,UAACF,IAAD,EAAU;AACT,UAAMU,eAAe,GAAGT,OAAO,IAAIE,aAAa,KAAK,CAA7B,IAAkCI,KAAK,KAAKP,IAAI,CAACQ,MAAzE;AAEA,0BACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGR,IAAI,CAACW,GAAL,CAAS,UAAChB,IAAD;AAAA,4BACR,oBAAC,UAAD;AAAY,UAAA,GAAG,EAAEA,IAAI,CAACC,EAAtB;AAA0B,UAAA,IAAI,EAAED,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADQ;AAAA,OAAT,CADH,CADF,EAOGe,eAAe,iBAAI,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPtB,CADF;AAWD,KArBH,CADF;AAyBD,GArCD;;AAuCA,sBACE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAC,iBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGGN,aAAa,EAHhB,CADF;AAOD,CA1DD;;AA4DA,eAAeb,MAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport styled from 'styled-components';\n\nimport { Container } from 'components/Layout';\nimport Skeleton from 'components/Skeleton';\nimport { Loading } from 'components/Loading';\nimport Empty from 'components/Empty';\nimport InfiniteScroll from 'components/InfiniteScroll';\nimport Head from 'components/Head';\nimport PeopleCard from './PeopleCard';\n\nimport { GET_USERS } from 'graphql/user';\n\nimport { PEOPLE_PAGE_USERS_LIMIT } from 'constants/DataLimit';\n\nimport { useStore } from 'store';\n\nimport { useQuery } from '@apollo/client';\n\nconst Root = styled(Container)`\n  margin-top: ${(p) => p.theme.spacing.lg};\n\n  @media (min-width: ${(p) => p.theme.screen.lg}) {\n    margin-left: ${(p) => p.theme.spacing.lg};\n    padding: 0;\n  }\n`;\n\nconst PeopleContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(180px, 3fr));\n  grid-auto-rows: auto;\n  grid-gap: 20px;\n  margin-bottom: ${(p) => p.theme.spacing.lg};\n`;\n\n/**\n * People page\n */\nconst People = () => {\n  const [{ auth }] = useStore();\n  const variables = {\n    userId: auth.user.id,\n    skip: 0,\n    limit: PEOPLE_PAGE_USERS_LIMIT,\n  };\n  const { data, loading, fetchMore, networkStatus } = useQuery(GET_USERS, {\n    variables,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const renderContent = () => {\n    if (loading && networkStatus === 1) {\n      return (\n        <PeopleContainer>\n          <Skeleton height={280} count={PEOPLE_PAGE_USERS_LIMIT} />\n        </PeopleContainer>\n      );\n    }\n\n    const { users, count } = data.getUsers;\n    if (!users.length > 0) return <Empty text=\"No people yet.\" />;\n\n    return (\n      <InfiniteScroll\n        data={users}\n        dataKey=\"getUsers.users\"\n        count={parseInt(count)}\n        variables={variables}\n        fetchMore={fetchMore}\n      >\n        {(data) => {\n          const showNextLoading = loading && networkStatus === 3 && count !== data.length;\n\n          return (\n            <Fragment>\n              <PeopleContainer>\n                {data.map((user) => (\n                  <PeopleCard key={user.id} user={user} />\n                ))}\n              </PeopleContainer>\n\n              {showNextLoading && <Loading top=\"lg\" />}\n            </Fragment>\n          );\n        }}\n      </InfiniteScroll>\n    );\n  };\n\n  return (\n    <Root maxWidth=\"md\">\n      <Head title=\"Find new People\" />\n\n      {renderContent()}\n    </Root>\n  );\n};\n\nexport default People;\n"]},"metadata":{},"sourceType":"module"}