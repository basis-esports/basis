{"ast":null,"code":"import _regeneratorRuntime from \"/Users/user/basis/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/user/basis/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/user/basis/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/user/basis/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/user/basis/frontend/src/pages/Profile/ProfileImageUpload.js\";\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 100%;\\n  height: 100%;\\n  object-fit: cover;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  position: relative;\\n  width: 180px;\\n  height: 180px;\\n  display: block;\\n  overflow: hidden;\\n  cursor: \", \";\\n  border-radius: 50%;\\n  border: 4px solid \", \";\\n  background-color: \", \";\\n\\n  &:hover \", \" {\\n    opacity: 1;\\n    visibility: visible;\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  position: absolute;\\n  width: 100%;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  visibility: hidden;\\n  border-radius: 50%;\\n  background-color: rgba(0, 0, 0, 0.6);\\n  color: \", \";\\n  opacity: 0;\\n  transition: visibility 0.2s linear, opacity 0.2s linear;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: none;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { useApolloClient } from '@apollo/client';\nimport { Loading } from 'components/Loading';\nimport { UserIcon } from 'components/icons';\nimport { GET_AUTH_USER, GET_USER, UPLOAD_PHOTO } from 'graphql/user';\nimport { GET_FOLLOWED_POSTS } from 'graphql/post';\nimport { MAX_USER_PROFILE_IMAGE_SIZE } from 'constants/ImageSize';\nimport { useGlobalMessage } from 'hooks/useGlobalMessage';\nimport { useStore } from 'store';\nvar Input = styled.input(_templateObject());\nvar Overlay = styled.div(_templateObject2(), function (p) {\n  return p.theme.colors.white;\n});\nvar Label = styled.label(_templateObject3(), function (p) {\n  return p.authUser && 'pointer';\n}, function (p) {\n  return p.theme.colors.border.main;\n}, function (p) {\n  return p.theme.colors.white;\n}, Overlay);\nvar Image = styled.img(_templateObject4());\n/**\n * Displays and Updates user profile image\n */\n\nvar ProfileImageUpload = function ProfileImageUpload(_ref) {\n  var userId = _ref.userId,\n      image = _ref.image,\n      imagePublicId = _ref.imagePublicId,\n      username = _ref.username;\n\n  var _useStore = useStore(),\n      _useStore2 = _slicedToArray(_useStore, 1),\n      auth = _useStore2[0].auth;\n\n  var client = useApolloClient();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var message = useGlobalMessage();\n\n  var handleImageChange = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var file;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              file = e.target.files[0];\n              e.target.value = '';\n\n              if (file) {\n                _context.next = 5;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 5:\n              if (!(file.size >= MAX_USER_PROFILE_IMAGE_SIZE)) {\n                _context.next = 9;\n                break;\n              }\n\n              setLoading(false);\n              message.error(\"File size should be less then \".concat(MAX_USER_PROFILE_IMAGE_SIZE / 1000000, \"MB\"));\n              return _context.abrupt(\"return\");\n\n            case 9:\n              _context.prev = 9;\n              _context.next = 12;\n              return client.mutate({\n                mutation: UPLOAD_PHOTO,\n                variables: {\n                  input: {\n                    id: auth.user.id,\n                    image: file,\n                    imagePublicId\n                  }\n                },\n                refetchQueries: function refetchQueries() {\n                  return [{\n                    query: GET_FOLLOWED_POSTS,\n                    variables: {\n                      userId: auth.user.id\n                    }\n                  }, {\n                    query: GET_AUTH_USER\n                  }, {\n                    query: GET_USER,\n                    variables: {\n                      username: auth.user.username\n                    }\n                  }];\n                }\n              });\n\n            case 12:\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](9);\n              message.error(_context.t0.graphQLErrors[0].message);\n\n            case 17:\n              setLoading(false);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[9, 14]]);\n    }));\n\n    return function handleImageChange(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var renderProfileImage = function renderProfileImage() {\n    if (loading) {\n      return /*#__PURE__*/React.createElement(Loading, {\n        top: \"xl\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 14\n        }\n      });\n    }\n\n    return image ? /*#__PURE__*/React.createElement(Image, {\n      src: image,\n      alt: \"profile\",\n      accept: \"image/x-png,image/jpeg\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 20\n      }\n    }) : /*#__PURE__*/React.createElement(UserIcon, {\n      width: \"172\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 90\n      }\n    });\n  };\n\n  var authUser = auth.user.id === userId;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, authUser && /*#__PURE__*/React.createElement(Input, {\n    name: \"image\",\n    type: \"file\",\n    id: \"image\",\n    accept: \"image/x-png,image/jpeg\",\n    onChange: handleImageChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    authUser: authUser,\n    htmlFor: \"image\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, authUser && /*#__PURE__*/React.createElement(Overlay, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 22\n    }\n  }, image ? 'Update' : 'Upload'), renderProfileImage()));\n};\n\nProfileImageUpload.propTypes = {\n  image: PropTypes.string,\n  imagePublicId: PropTypes.string,\n  userId: PropTypes.string.isRequired\n};\nexport default ProfileImageUpload;","map":{"version":3,"sources":["/Users/user/basis/frontend/src/pages/Profile/ProfileImageUpload.js"],"names":["React","useState","PropTypes","styled","useApolloClient","Loading","UserIcon","GET_AUTH_USER","GET_USER","UPLOAD_PHOTO","GET_FOLLOWED_POSTS","MAX_USER_PROFILE_IMAGE_SIZE","useGlobalMessage","useStore","Input","input","Overlay","div","p","theme","colors","white","Label","label","authUser","border","main","Image","img","ProfileImageUpload","userId","image","imagePublicId","username","auth","client","loading","setLoading","message","handleImageChange","e","file","target","files","value","size","error","mutate","mutation","variables","id","user","refetchQueries","query","graphQLErrors","renderProfileImage","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { useApolloClient } from '@apollo/client';\n\nimport { Loading } from 'components/Loading';\nimport { UserIcon } from 'components/icons';\n\nimport { GET_AUTH_USER, GET_USER, UPLOAD_PHOTO } from 'graphql/user';\nimport { GET_FOLLOWED_POSTS } from 'graphql/post';\n\nimport { MAX_USER_PROFILE_IMAGE_SIZE } from 'constants/ImageSize';\n\nimport { useGlobalMessage } from 'hooks/useGlobalMessage';\n\nimport { useStore } from 'store';\n\nconst Input = styled.input`\n  display: none;\n`;\n\nconst Overlay = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  width: 100%;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  visibility: hidden;\n  border-radius: 50%;\n  background-color: rgba(0, 0, 0, 0.6);\n  color: ${(p) => p.theme.colors.white};\n  opacity: 0;\n  transition: visibility 0.2s linear, opacity 0.2s linear;\n`;\n\nconst Label = styled.label`\n  position: relative;\n  width: 180px;\n  height: 180px;\n  display: block;\n  overflow: hidden;\n  cursor: ${(p) => p.authUser && 'pointer'};\n  border-radius: 50%;\n  border: 4px solid ${(p) => p.theme.colors.border.main};\n  background-color: ${(p) => p.theme.colors.white};\n\n  &:hover ${Overlay} {\n    opacity: 1;\n    visibility: visible;\n  }\n`;\n\nconst Image = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n\n/**\n * Displays and Updates user profile image\n */\nconst ProfileImageUpload = ({ userId, image, imagePublicId, username }) => {\n  const [{ auth }] = useStore();\n  const client = useApolloClient();\n  const [loading, setLoading] = useState(false);\n\n  const message = useGlobalMessage();\n\n  const handleImageChange = async (e) => {\n    setLoading(true);\n\n    const file = e.target.files[0];\n    e.target.value = '';\n\n    if (!file) return;\n\n    if (file.size >= MAX_USER_PROFILE_IMAGE_SIZE) {\n      setLoading(false);\n      message.error(`File size should be less then ${MAX_USER_PROFILE_IMAGE_SIZE / 1000000}MB`);\n      return;\n    }\n\n    try {\n      await client.mutate({\n        mutation: UPLOAD_PHOTO,\n        variables: { input: { id: auth.user.id, image: file, imagePublicId } },\n        refetchQueries: () => [\n          { query: GET_FOLLOWED_POSTS, variables: { userId: auth.user.id } },\n          { query: GET_AUTH_USER },\n          { query: GET_USER, variables: { username: auth.user.username } },\n        ],\n      });\n    } catch (err) {\n      message.error(err.graphQLErrors[0].message);\n    }\n\n    setLoading(false);\n  };\n\n  const renderProfileImage = () => {\n    if (loading) {\n      return <Loading top=\"xl\" />;\n    }\n\n    return image ? <Image src={image} alt=\"profile\" accept=\"image/x-png,image/jpeg\" /> : <UserIcon width=\"172\" />;\n  };\n\n  const authUser = auth.user.id === userId;\n\n  return (\n    <>\n      {authUser && (\n        <Input name=\"image\" type=\"file\" id=\"image\" accept=\"image/x-png,image/jpeg\" onChange={handleImageChange} />\n      )}\n\n      <Label authUser={authUser} htmlFor=\"image\">\n        {authUser && <Overlay>{image ? 'Update' : 'Upload'}</Overlay>}\n\n        {renderProfileImage()}\n      </Label>\n    </>\n  );\n};\n\nProfileImageUpload.propTypes = {\n  image: PropTypes.string,\n  imagePublicId: PropTypes.string,\n  userId: PropTypes.string.isRequired,\n};\n\nexport default ProfileImageUpload;\n"]},"metadata":{},"sourceType":"module"}