{"ast":null,"code":"import _slicedToArray from \"/Users/user/basis/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/user/basis/frontend/src/pages/Profile/ProfilePosts.js\";\n\nimport React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport { generatePath } from 'react-router-dom';\nimport Skeleton from 'components/Skeleton';\nimport Modal from 'components/Modal';\nimport PostPopup from 'components/PostPopup';\nimport PostCard from 'components/PostCard';\nimport { Spacing } from 'components/Layout';\nimport InfiniteScroll from 'components/InfiniteScroll';\nimport { Loading } from 'components/Loading';\nimport Empty from 'components/Empty';\nimport { PROFILE_PAGE_POSTS_LIMIT } from 'constants/DataLimit';\nimport { GET_USER_POSTS } from 'graphql/user';\nimport * as Routes from 'routes';\n/**\n * Renders posts in profile page\n */\n\nvar ProfilePosts = function ProfilePosts(_ref) {\n  var username = _ref.username;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isPostPopupOpen = _useState2[0],\n      setIsPostPopupOpen = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalPostId = _useState4[0],\n      setModalPostId = _useState4[1];\n\n  var variables = {\n    username,\n    skip: 0,\n    limit: PROFILE_PAGE_POSTS_LIMIT\n  };\n\n  var _useQuery = useQuery(GET_USER_POSTS, {\n    variables,\n    notifyOnNetworkStatusChange: true\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  var _openModal = function openModal(postId) {\n    window.history.pushState('', '', generatePath(Routes.POST, {\n      id: postId\n    }));\n    setModalPostId(postId);\n    setIsPostPopupOpen(true);\n  };\n\n  var closeModal = function closeModal() {\n    window.history.pushState('', '', generatePath(Routes.USER_PROFILE, {\n      username\n    }));\n    setIsPostPopupOpen(false);\n  };\n\n  if (loading && networkStatus === 1) {\n    return /*#__PURE__*/React.createElement(Skeleton, {\n      height: 500,\n      bottom: \"lg\",\n      top: \"lg\",\n      count: PROFILE_PAGE_POSTS_LIMIT,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 12\n      }\n    });\n  }\n\n  var _data$getUserPosts = data.getUserPosts,\n      posts = _data$getUserPosts.posts,\n      count = _data$getUserPosts.count;\n\n  if (!posts.length > 0) {\n    return /*#__PURE__*/React.createElement(Spacing, {\n      bottom: \"lg\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Empty, {\n      text: \"No posts yet.\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    data: posts,\n    dataKey: \"getUserPosts.posts\",\n    count: parseInt(count),\n    variables: variables,\n    fetchMore: fetchMore,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, function (data) {\n    return data.map(function (post, i) {\n      var showNextLoading = loading && networkStatus === 3 && data.length - 1 === i;\n      return /*#__PURE__*/React.createElement(Fragment, {\n        key: post.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      }, modalPostId === post.id && /*#__PURE__*/React.createElement(Modal, {\n        open: isPostPopupOpen,\n        onClose: closeModal,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(PostPopup, {\n        id: post.id,\n        closeModal: closeModal,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Spacing, {\n        bottom: \"lg\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(PostCard, {\n        author: post.author,\n        postId: post.id,\n        imagePublicId: post.imagePublicId,\n        comments: post.comments,\n        title: post.title,\n        image: post.image,\n        likes: post.likes,\n        createdAt: post.createdAt,\n        openModal: function openModal() {\n          return _openModal(post.id);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }\n      })), showNextLoading && /*#__PURE__*/React.createElement(Loading, {\n        top: \"lg\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 35\n        }\n      }));\n    });\n  });\n};\n\nProfilePosts.propTypes = {\n  username: PropTypes.string.isRequired\n};\nexport default ProfilePosts;","map":{"version":3,"sources":["/Users/user/basis/frontend/src/pages/Profile/ProfilePosts.js"],"names":["React","Fragment","useState","PropTypes","useQuery","generatePath","Skeleton","Modal","PostPopup","PostCard","Spacing","InfiniteScroll","Loading","Empty","PROFILE_PAGE_POSTS_LIMIT","GET_USER_POSTS","Routes","ProfilePosts","username","isPostPopupOpen","setIsPostPopupOpen","modalPostId","setModalPostId","variables","skip","limit","notifyOnNetworkStatusChange","data","loading","fetchMore","networkStatus","openModal","postId","window","history","pushState","POST","id","closeModal","USER_PROFILE","getUserPosts","posts","count","length","parseInt","map","post","i","showNextLoading","author","imagePublicId","comments","title","image","likes","createdAt","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport { generatePath } from 'react-router-dom';\n\nimport Skeleton from 'components/Skeleton';\nimport Modal from 'components/Modal';\nimport PostPopup from 'components/PostPopup';\nimport PostCard from 'components/PostCard';\nimport { Spacing } from 'components/Layout';\nimport InfiniteScroll from 'components/InfiniteScroll';\nimport { Loading } from 'components/Loading';\nimport Empty from 'components/Empty';\n\nimport { PROFILE_PAGE_POSTS_LIMIT } from 'constants/DataLimit';\n\nimport { GET_USER_POSTS } from 'graphql/user';\n\nimport * as Routes from 'routes';\n\n/**\n * Renders posts in profile page\n */\nconst ProfilePosts = ({ username }) => {\n  const [isPostPopupOpen, setIsPostPopupOpen] = useState(false);\n  const [modalPostId, setModalPostId] = useState('');\n  const variables = { username, skip: 0, limit: PROFILE_PAGE_POSTS_LIMIT };\n  const { data, loading, fetchMore, networkStatus } = useQuery(GET_USER_POSTS, {\n    variables,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const openModal = (postId) => {\n    window.history.pushState('', '', generatePath(Routes.POST, { id: postId }));\n    setModalPostId(postId);\n    setIsPostPopupOpen(true);\n  };\n\n  const closeModal = () => {\n    window.history.pushState('', '', generatePath(Routes.USER_PROFILE, { username }));\n    setIsPostPopupOpen(false);\n  };\n\n  if (loading && networkStatus === 1) {\n    return <Skeleton height={500} bottom=\"lg\" top=\"lg\" count={PROFILE_PAGE_POSTS_LIMIT} />;\n  }\n\n  const { posts, count } = data.getUserPosts;\n  if (!posts.length > 0) {\n    return (\n      <Spacing bottom=\"lg\">\n        <Empty text=\"No posts yet.\" />\n      </Spacing>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      data={posts}\n      dataKey=\"getUserPosts.posts\"\n      count={parseInt(count)}\n      variables={variables}\n      fetchMore={fetchMore}\n    >\n      {(data) => {\n        return data.map((post, i) => {\n          const showNextLoading = loading && networkStatus === 3 && data.length - 1 === i;\n\n          return (\n            <Fragment key={post.id}>\n              {modalPostId === post.id && (\n                <Modal open={isPostPopupOpen} onClose={closeModal}>\n                  <PostPopup id={post.id} closeModal={closeModal} />\n                </Modal>\n              )}\n\n              <Spacing bottom=\"lg\">\n                <PostCard\n                  author={post.author}\n                  postId={post.id}\n                  imagePublicId={post.imagePublicId}\n                  comments={post.comments}\n                  title={post.title}\n                  image={post.image}\n                  likes={post.likes}\n                  createdAt={post.createdAt}\n                  openModal={() => openModal(post.id)}\n                />\n              </Spacing>\n\n              {showNextLoading && <Loading top=\"lg\" />}\n            </Fragment>\n          );\n        });\n      }}\n    </InfiniteScroll>\n  );\n};\n\nProfilePosts.propTypes = {\n  username: PropTypes.string.isRequired,\n};\n\nexport default ProfilePosts;\n"]},"metadata":{},"sourceType":"module"}