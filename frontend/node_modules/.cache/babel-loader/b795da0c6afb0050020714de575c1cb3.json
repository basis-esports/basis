{"ast":null,"code":"import _slicedToArray from \"/Users/user/basis/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/user/basis/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/user/basis/frontend/src/pages/Notifications/Notifications.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  overflow: hidden;\\n  border-radius: \", \";\\n  border: 1px solid \", \";\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-top: \", \";\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useQuery } from '@apollo/client';\nimport { Container, Content } from 'components/Layout';\nimport { Loading } from 'components/Loading';\nimport Skeleton from 'components/Skeleton';\nimport Notification from 'components/App/Notification';\nimport InfiniteScroll from 'components/InfiniteScroll';\nimport Empty from 'components/Empty';\nimport Head from 'components/Head';\nimport { useStore } from 'store';\nimport { GET_USER_NOTIFICATION } from 'graphql/notification';\nimport { NOTIFICATIONS_PAGE_NOTIFICATION_LIMIT } from 'constants/DataLimit';\nvar Root = styled(Container)(_templateObject(), function (p) {\n  return p.theme.spacing.lg;\n});\nvar List = styled.div(_templateObject2(), function (p) {\n  return p.theme.radius.sm;\n}, function (p) {\n  return p.theme.colors.border.main;\n});\n/**\n * Notifications page\n */\n\nvar Notifications = function Notifications() {\n  var _useStore = useStore(),\n      _useStore2 = _slicedToArray(_useStore, 1),\n      auth = _useStore2[0].auth;\n\n  var variables = {\n    userId: auth.user.id,\n    skip: 0,\n    limit: NOTIFICATIONS_PAGE_NOTIFICATION_LIMIT\n  };\n\n  var _useQuery = useQuery(GET_USER_NOTIFICATION, {\n    variables,\n    notifyOnNetworkStatusChange: true\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  var renderContent = function renderContent() {\n    if (loading && networkStatus === 1) {\n      return /*#__PURE__*/React.createElement(Skeleton, {\n        height: 56,\n        bottom: \"xxs\",\n        count: NOTIFICATIONS_PAGE_NOTIFICATION_LIMIT,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 14\n        }\n      });\n    }\n\n    var _data$getUserNotifica = data.getUserNotifications,\n        notifications = _data$getUserNotifica.notifications,\n        count = _data$getUserNotifica.count;\n\n    if (!notifications.length) {\n      return /*#__PURE__*/React.createElement(Empty, {\n        text: \"No notifications yet.\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 14\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(InfiniteScroll, {\n      data: notifications,\n      dataKey: \"getUserNotifications.notifications\",\n      count: parseInt(count),\n      variables: variables,\n      fetchMore: fetchMore,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, function (data) {\n      var showNextLoading = loading && networkStatus === 3 && count !== data.length;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(List, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }\n      }, data.map(function (notification) {\n        return /*#__PURE__*/React.createElement(Notification, {\n          key: notification.id,\n          notification: notification,\n          close: function close() {\n            return false;\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 19\n          }\n        });\n      })), showNextLoading && /*#__PURE__*/React.createElement(Loading, {\n        top: \"lg\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 35\n        }\n      }));\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Root, {\n    maxWidth: \"md\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Head, {\n    title: \"\".concat(auth.user.username, \"'s Notifications\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }), renderContent()));\n};\n\nexport default Notifications;","map":{"version":3,"sources":["/Users/user/basis/frontend/src/pages/Notifications/Notifications.js"],"names":["React","styled","useQuery","Container","Content","Loading","Skeleton","Notification","InfiniteScroll","Empty","Head","useStore","GET_USER_NOTIFICATION","NOTIFICATIONS_PAGE_NOTIFICATION_LIMIT","Root","p","theme","spacing","lg","List","div","radius","sm","colors","border","main","Notifications","auth","variables","userId","user","id","skip","limit","notifyOnNetworkStatusChange","data","loading","fetchMore","networkStatus","renderContent","getUserNotifications","notifications","count","length","parseInt","showNextLoading","map","notification","username"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,mBAAnC;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AAEA,SAASC,QAAT,QAAyB,OAAzB;AAEA,SAASC,qBAAT,QAAsC,sBAAtC;AAEA,SAASC,qCAAT,QAAsD,qBAAtD;AAEA,IAAMC,IAAI,GAAGb,MAAM,CAACE,SAAD,CAAT,oBACM,UAACY,CAAD;AAAA,SAAOA,CAAC,CAACC,KAAF,CAAQC,OAAR,CAAgBC,EAAvB;AAAA,CADN,CAAV;AAIA,IAAMC,IAAI,GAAGlB,MAAM,CAACmB,GAAV,qBAES,UAACL,CAAD;AAAA,SAAOA,CAAC,CAACC,KAAF,CAAQK,MAAR,CAAeC,EAAtB;AAAA,CAFT,EAGY,UAACP,CAAD;AAAA,SAAOA,CAAC,CAACC,KAAF,CAAQO,MAAR,CAAeC,MAAf,CAAsBC,IAA7B;AAAA,CAHZ,CAAV;AAMA;AACA;AACA;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA,kBACPf,QAAQ,EADD;AAAA;AAAA,MACjBgB,IADiB,iBACjBA,IADiB;;AAE1B,MAAMC,SAAS,GAAG;AAChBC,IAAAA,MAAM,EAAEF,IAAI,CAACG,IAAL,CAAUC,EADF;AAEhBC,IAAAA,IAAI,EAAE,CAFU;AAGhBC,IAAAA,KAAK,EAAEpB;AAHS,GAAlB;;AAF0B,kBAO0BX,QAAQ,CAACU,qBAAD,EAAwB;AAClFgB,IAAAA,SADkF;AAElFM,IAAAA,2BAA2B,EAAE;AAFqD,GAAxB,CAPlC;AAAA,MAOlBC,IAPkB,aAOlBA,IAPkB;AAAA,MAOZC,OAPY,aAOZA,OAPY;AAAA,MAOHC,SAPG,aAOHA,SAPG;AAAA,MAOQC,aAPR,aAOQA,aAPR;;AAY1B,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,QAAIH,OAAO,IAAIE,aAAa,KAAK,CAAjC,EAAoC;AAClC,0BAAO,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAE,EAAlB;AAAsB,QAAA,MAAM,EAAC,KAA7B;AAAmC,QAAA,KAAK,EAAEzB,qCAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AAHyB,gCAKOsB,IAAI,CAACK,oBALZ;AAAA,QAKlBC,aALkB,yBAKlBA,aALkB;AAAA,QAKHC,KALG,yBAKHA,KALG;;AAM1B,QAAI,CAACD,aAAa,CAACE,MAAnB,EAA2B;AACzB,0BAAO,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,uBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AAED,wBACE,oBAAC,cAAD;AACE,MAAA,IAAI,EAAEF,aADR;AAEE,MAAA,OAAO,EAAC,oCAFV;AAGE,MAAA,KAAK,EAAEG,QAAQ,CAACF,KAAD,CAHjB;AAIE,MAAA,SAAS,EAAEd,SAJb;AAKE,MAAA,SAAS,EAAES,SALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOG,UAACF,IAAD,EAAU;AACT,UAAMU,eAAe,GAAGT,OAAO,IAAIE,aAAa,KAAK,CAA7B,IAAkCI,KAAK,KAAKP,IAAI,CAACQ,MAAzE;AAEA,0BACE,uDACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGR,IAAI,CAACW,GAAL,CAAS,UAACC,YAAD;AAAA,4BACR,oBAAC,YAAD;AAAc,UAAA,GAAG,EAAEA,YAAY,CAAChB,EAAhC;AAAoC,UAAA,YAAY,EAAEgB,YAAlD;AAAgE,UAAA,KAAK,EAAE;AAAA,mBAAM,KAAN;AAAA,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADQ;AAAA,OAAT,CADH,CADF,EAOGF,eAAe,iBAAI,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPtB,CADF;AAWD,KArBH,CADF;AAyBD,GAnCD;;AAqCA,sBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,YAAKlB,IAAI,CAACG,IAAL,CAAUkB,QAAf,qBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGGT,aAAa,EAHhB,CADF,CADF;AASD,CA1DD;;AA4DA,eAAeb,aAAf","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { useQuery } from '@apollo/client';\n\nimport { Container, Content } from 'components/Layout';\nimport { Loading } from 'components/Loading';\nimport Skeleton from 'components/Skeleton';\nimport Notification from 'components/App/Notification';\nimport InfiniteScroll from 'components/InfiniteScroll';\nimport Empty from 'components/Empty';\nimport Head from 'components/Head';\n\nimport { useStore } from 'store';\n\nimport { GET_USER_NOTIFICATION } from 'graphql/notification';\n\nimport { NOTIFICATIONS_PAGE_NOTIFICATION_LIMIT } from 'constants/DataLimit';\n\nconst Root = styled(Container)`\n  margin-top: ${(p) => p.theme.spacing.lg};\n`;\n\nconst List = styled.div`\n  overflow: hidden;\n  border-radius: ${(p) => p.theme.radius.sm};\n  border: 1px solid ${(p) => p.theme.colors.border.main};\n`;\n\n/**\n * Notifications page\n */\nconst Notifications = () => {\n  const [{ auth }] = useStore();\n  const variables = {\n    userId: auth.user.id,\n    skip: 0,\n    limit: NOTIFICATIONS_PAGE_NOTIFICATION_LIMIT,\n  };\n  const { data, loading, fetchMore, networkStatus } = useQuery(GET_USER_NOTIFICATION, {\n    variables,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const renderContent = () => {\n    if (loading && networkStatus === 1) {\n      return <Skeleton height={56} bottom=\"xxs\" count={NOTIFICATIONS_PAGE_NOTIFICATION_LIMIT} />;\n    }\n\n    const { notifications, count } = data.getUserNotifications;\n    if (!notifications.length) {\n      return <Empty text=\"No notifications yet.\" />;\n    }\n\n    return (\n      <InfiniteScroll\n        data={notifications}\n        dataKey=\"getUserNotifications.notifications\"\n        count={parseInt(count)}\n        variables={variables}\n        fetchMore={fetchMore}\n      >\n        {(data) => {\n          const showNextLoading = loading && networkStatus === 3 && count !== data.length;\n\n          return (\n            <>\n              <List>\n                {data.map((notification) => (\n                  <Notification key={notification.id} notification={notification} close={() => false} />\n                ))}\n              </List>\n\n              {showNextLoading && <Loading top=\"lg\" />}\n            </>\n          );\n        }}\n      </InfiniteScroll>\n    );\n  };\n\n  return (\n    <Content>\n      <Root maxWidth=\"md\">\n        <Head title={`${auth.user.username}'s Notifications`} />\n\n        {renderContent()}\n      </Root>\n    </Content>\n  );\n};\n\nexport default Notifications;\n"]},"metadata":{},"sourceType":"module"}